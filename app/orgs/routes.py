from flask_restful import Resource, reqparse
from . import orgs_api
import datetime

from flask import (
    Blueprint, current_app, flash, g, redirect, render_template, request,
    session, url_for, jsonify, make_response
)

from app.gauth.routes import calendar_service, gmail_service, drive_service, get_credentials_obj
from functools import wraps
from app.db import get_db, exec_sql
import app.dbOps as dbOps


def create_calendar(slot_id: int, start_date: str, end_date: str, description: str = "class", summary: str = "course_code", location: str = "home"):
    schedule = dbOps.SlotSchedule.read(slot_id)
    date_obj = datetime.datetime.strptime(start_date, '%Y-%m-%d')

    cal_service = calendar_service(get_credentials_obj())
    new_cal = cal_service.calendars().insert(body={
        'summary': summary,
        'description': 'Course timetable generated by FeedFront',
        'timeZone': 'Asia/Kolkata'
    }).execute()

    print(new_cal)
    permit = cal_service.acl().insert(
        calendarId=new_cal["id"],
        body={
            "role": "reader",
            "scope": {
                "type": "default"
            }
        },
        sendNotifications=True
    ).execute()

    print('\n')
    print(permit)

    end_date_str = ''.join(end_date.split('-'))

    for i in range(0, 7):
        for interval in schedule:
            if interval['day'] == date_obj.weekday():
                start = interval['start_time'].strftime('%H:%M') + ":00+05:30"
                end = interval['end_time'].strftime('%H:%M') + ":00+05:30"

                body = {
                    "summary": f"day{interval['day']}",
                    "location": location,
                    "description": description,
                    "end": {
                        "dateTime": f"{date_obj.strftime('%Y-%m-%d')}T{end}",
                        "timeZone": "Asia/Kolkata"
                    },
                    "start": {
                        "dateTime": f"{date_obj.strftime('%Y-%m-%d')}T{start}",
                        "timeZone": "Asia/Kolkata"
                    },
                    "recurrence": [
                        f"RRULE:FREQ=WEEKLY;UNTIL={end_date_str}T235959z"
                    ]
                }

                print(body)
                event_result = cal_service.events().insert(
                    calendarId=new_cal['id'],
                    sendUpdates="all",
                    body=body
                ).execute()
                print(event_result)

                break

        date_obj = date_obj + datetime.timedelta(days=1)

    return f'https://calendar.google.com/calendar/embed?src={new_cal["id"]}&ctz=Asia/Kolkata'


def managersOnly(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        user_id = session['id']
        org_id = kwargs.get('org_id')
        print(f'user - {user_id}, org - {org_id}')
        if dbOps.isManager(user_id, org_id):
            return func(*args, **kwargs)
        return 'Not authorized for this action'
    return wrapper


class ListOrgs(Resource):
    def get(self):
        return dbOps.ListOrgs.read()

    def post(self):
        """
            request.json = {
                "name" : "name",
                "type" : "type"
            }
        """
        reqBody = request.get_json()
        org_id = dbOps.Organisation.create(**reqBody)
        managerStatus = dbOps.Manager.create(session['id'], org_id)
        return make_response(f'Organisation indexed : {org_id}, managerStatus : {managerStatus}')


class ListCourses(Resource):
    def get(self, org_id):
        return dbOps.ListCourses.read(org_id)

    @managersOnly
    def post(self, org_id):
        """
            request.json = {
                "kyc" : "info",
                "type" : "type",
                "title" : "title",
                "course_code" : "CSasde"
            }
        """
        reqBody = request.get_json()
        reqBody['org_id'] = org_id
        course_id = dbOps.Course.create(**reqBody)
        return make_response(f'Course indexed at : {course_id}')


class ListSlots(Resource):
    def get(self, org_id):
        return dbOps.ListSlots.read(org_id)

    @managersOnly
    def post(self, org_id):
        """
            request.json = {
                "slot_code" : "Code",
                "0" : { #Monday
                    "start_time" : "2:30",
                    "end_time" : "4:00"
                },
                "1" : { #Tuesday
                    "start_time" : "4:00",
                    "end_time" : "5:30"
                }....
            }
        """
        reqBody = request.get_json()
        slot_id, status = dbOps.makeSlot(org_id, reqBody)
        return make_response(f'Slot indexed at : {slot_id}, schedule status : {status}')


class Course(Resource):
    def get(self, org_id, course_id):
        return dbOps.Course.read(course_id)


class ListOfferings(Resource):
    def get(self, org_id, course_id):
        return dbOps.ListOfferings.read(course_id)

    @managersOnly
    def post(self, org_id, course_id):
        '''
            request.json = {
                "instructor" : "",
                "grading_scheme" : "",
                "start_date" : DATE,
                "end_date" : DATE,
                "slot_id" : {
                    "slot_code" : "Code", #If this exists in the db look no further
                    "1" : { #Tuesday
                        "start_time" : "2:30",
                        "end_time" : "4:00"
                    },
                    "2" : { #Wednesday
                        "start_time" : "4:00",
                        "end_time" : "5:30"
                    }
                },
                "previous_offering_id": null
            }
        '''
        reqBody = request.get_json()
        req_slot_id = reqBody['slot_id']
        if type(req_slot_id) != int:
            slot_id = dbOps.getSlotIdByCode(org_id, req_slot_id['slot_code'])
            if slot_id <= 0:
                slot_id, status = dbOps.makeSlot(org_id, req_slot_id)
                print(f'Slot indexed at: {slot_id}, schedule status: {status}')
            reqBody['slot_id'] = slot_id

        if reqBody.get('cal_link', None) == None:
            reqBody['cal_link'] = create_calendar(
                reqBody['slot_id'],
                reqBody['start_date'],
                reqBody['end_date'],
                summary=f'FF-{course_id}'
            )

        return f'Offering id - {dbOps.Offering.create(course_id, **reqBody)}, cal_link - {reqBody["cal_link"]}'


class Offering(Resource):
    def get(self, org_id, course_id, offering_id):
        return dbOps.Offering.read(offering_id)


class Rating(Resource):
    def post(self, org_id, course_id, offering_id):
        """
            request.json = {
                "practice_rating" : 10,
                "content_rating" : 10,
                "theory_rating" : 10,
                "litemeter" : 10
            }
        """
        reqBody = request.get_json()
        reqBody['user_id'] = session['id']
        reqBody['offering_id'] = offering_id

        result = dbOps.Rating.create(**reqBody)

        return "Rating added" if result == None else str(result)

    #TODO : updates


class ListResources(Resource):
    def get(self, org_id, course_id, offering_id):
        return dbOps.ListResources.read(offering_id)

    def post(self, org_id, course_id, offering_id):
        """
            request.json = {
                "type" : "",
                "link" : "",
                "about" : ""
            }
        """
        reqBody = request.get_json()
        reqBody['offering_id'] = offering_id
        reqBody['user_id'] = session['id']
        return dbOps.Resource.create(**reqBody)


orgs_api.add_resource(ListOrgs, '/')
orgs_api.add_resource(ListSlots, '/<int:org_id>/slots')
orgs_api.add_resource(ListCourses, '/<int:org_id>/courses')
orgs_api.add_resource(Course, '/<int:org_id>/<int:course_id>')
orgs_api.add_resource(ListOfferings, '/<int:org_id>/<int:course_id>/offerings')
orgs_api.add_resource(
    Offering, '/<int:org_id>/<int:course_id>/<int:offering_id>')
orgs_api.add_resource(
    Rating, '/<int:org_id>/<int:course_id>/<int:offering_id>/ratings')
orgs_api.add_resource(
    ListResources, '/<int:org_id>/<int:course_id>/<int:offering_id>/resources')
